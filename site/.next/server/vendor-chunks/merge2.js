"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/merge2";
exports.ids = ["vendor-chunks/merge2"];
exports.modules = {

/***/ "(rsc)/./node_modules/merge2/index.js":
/*!**************************************!*\
  !*** ./node_modules/merge2/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*\n * merge2\n * https://github.com/teambition/merge2\n *\n * Copyright (c) 2014-2020 Teambition\n * Licensed under the MIT license.\n */ const Stream = __webpack_require__(/*! stream */ \"stream\");\nconst PassThrough = Stream.PassThrough;\nconst slice = Array.prototype.slice;\nmodule.exports = merge2;\nfunction merge2() {\n    const streamsQueue = [];\n    const args = slice.call(arguments);\n    let merging = false;\n    let options = args[args.length - 1];\n    if (options && !Array.isArray(options) && options.pipe == null) {\n        args.pop();\n    } else {\n        options = {};\n    }\n    const doEnd = options.end !== false;\n    const doPipeError = options.pipeError === true;\n    if (options.objectMode == null) {\n        options.objectMode = true;\n    }\n    if (options.highWaterMark == null) {\n        options.highWaterMark = 64 * 1024;\n    }\n    const mergedStream = PassThrough(options);\n    function addStream() {\n        for(let i = 0, len = arguments.length; i < len; i++){\n            streamsQueue.push(pauseStreams(arguments[i], options));\n        }\n        mergeStream();\n        return this;\n    }\n    function mergeStream() {\n        if (merging) {\n            return;\n        }\n        merging = true;\n        let streams = streamsQueue.shift();\n        if (!streams) {\n            process.nextTick(endStream);\n            return;\n        }\n        if (!Array.isArray(streams)) {\n            streams = [\n                streams\n            ];\n        }\n        let pipesCount = streams.length + 1;\n        function next() {\n            if (--pipesCount > 0) {\n                return;\n            }\n            merging = false;\n            mergeStream();\n        }\n        function pipe(stream) {\n            function onend() {\n                stream.removeListener(\"merge2UnpipeEnd\", onend);\n                stream.removeListener(\"end\", onend);\n                if (doPipeError) {\n                    stream.removeListener(\"error\", onerror);\n                }\n                next();\n            }\n            function onerror(err) {\n                mergedStream.emit(\"error\", err);\n            }\n            // skip ended stream\n            if (stream._readableState.endEmitted) {\n                return next();\n            }\n            stream.on(\"merge2UnpipeEnd\", onend);\n            stream.on(\"end\", onend);\n            if (doPipeError) {\n                stream.on(\"error\", onerror);\n            }\n            stream.pipe(mergedStream, {\n                end: false\n            });\n            // compatible for old stream\n            stream.resume();\n        }\n        for(let i = 0; i < streams.length; i++){\n            pipe(streams[i]);\n        }\n        next();\n    }\n    function endStream() {\n        merging = false;\n        // emit 'queueDrain' when all streams merged.\n        mergedStream.emit(\"queueDrain\");\n        if (doEnd) {\n            mergedStream.end();\n        }\n    }\n    mergedStream.setMaxListeners(0);\n    mergedStream.add = addStream;\n    mergedStream.on(\"unpipe\", function(stream) {\n        stream.emit(\"merge2UnpipeEnd\");\n    });\n    if (args.length) {\n        addStream.apply(null, args);\n    }\n    return mergedStream;\n}\n// check and pause streams for pipe.\nfunction pauseStreams(streams, options) {\n    if (!Array.isArray(streams)) {\n        // Backwards-compat with old-style streams\n        if (!streams._readableState && streams.pipe) {\n            streams = streams.pipe(PassThrough(options));\n        }\n        if (!streams._readableState || !streams.pause || !streams.pipe) {\n            throw new Error(\"Only readable stream can be merged.\");\n        }\n        streams.pause();\n    } else {\n        for(let i = 0, len = streams.length; i < len; i++){\n            streams[i] = pauseStreams(streams[i], options);\n        }\n    }\n    return streams;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/merge2/index.js\n");

/***/ })

};
;